from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from authorization import auth
from create_users.db_operations import remember_username_password
from db import db_conn
from bot_files import keyboards as kb
from create_users.to_handlers import (
    get_all_candidates,
    get_user_credentials,
)
from tasks_metrics.to_handlers import (
    send_HR_metrics,
    task_complete,
    get_candidate_results,
    get_candidate_formatted_results,
    update_times_attempted,
)
from tasks_generator.to_handlers import (
    task_generated,
)
from tasks_new.to_handlers import (
    new_task_generated,
)


class FSM_NewCandidate(StatesGroup):
    confirm = State()

    async def new_candidate_command(message: types.Message):
        await FSM_NewCandidate.confirm.set()
        await message.reply(
            ("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è? üìÑ\n"
                + "‚ùóÔ∏è<b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
                + "–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏, "
                + "–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ '<code>–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ‚òëÔ∏è</code>'."),
            parse_mode="HTML",
            reply_markup=kb.confirm_kb,
        )

    async def new_candidate_confirm(message: types.Message, state: FSMContext):
        if message.text == "–û—Ç–º–µ–Ω–∞":
            await message.reply(
            "–ú–µ–Ω—é",
            reply_markup=kb.menu_kb,
        )
        elif message.text == "–î–∞":
            if message.from_user.username in get_all_candidates(conn=db_conn):
                credentials = remember_username_password(message.from_user.username, conn=db_conn)
                username = credentials["username"]
                password = credentials["password"]
                await message.reply(
                    ("‚ùóÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ "
                    + "<a href='candidates.trainingdata.solutions'>candidates.trainingdata.solutions</a>.\n"
                    + "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
                    + f"–õ–æ–≥–∏–Ω: <code>{username}</code>\n"
                    + f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
                    + "–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å HR."),
                    parse_mode="HTML",
                    reply_markup=kb.menu_kb,
                )
            else:
                credentials = get_user_credentials(message.from_user.username)
                username = credentials["username"]
                password = credentials["password1"]
                await message.reply(
                    ("<a href='candidates.trainingdata.solutions'>candidates.trainingdata.solutions</a>\n"
                        + "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
                        + f"–õ–æ–≥–∏–Ω: <code>{username}</code>\n"
                        + f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
                        + "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –ó–î–ï–°–¨ –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –°–°–´–õ–ö–ê –ù–ê –ù–û–£–®–ï–ù\n" # TODO: –°–°–´–õ–ö–ê –ù–ê –ù–û–£–®–ï–ù
                        + "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, "
                        + "–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É  '<code>–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ‚òëÔ∏è</code>' –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –£–¥–∞—á–∏!"),
                    parse_mode="HTML",
                    reply_markup=kb.menu_kb,
                )
                if not task_generated(message.from_user.username):
                    await message.reply(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR.",
                        reply_markup=kb.menu_kb,
                    )
        else:
            await message.reply(
            "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=kb.menu_kb,
        )
        await state.finish()

class FSM_ExistingCandidate(StatesGroup):
    confirm = State()

    async def existing_candidate_command(message: types.Message):
        await FSM_ExistingCandidate.confirm.set()
        await message.reply(
            "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?",
            reply_markup=kb.confirm_kb,
        )

    async def existing_candidate_confirm(message: types.Message, state: FSMContext):
        if message.text == "–û—Ç–º–µ–Ω–∞":
            await message.reply(
            "–ú–µ–Ω—é",
            reply_markup=kb.menu_kb,
        )
        elif message.text == "–î–∞":
            if message.from_user.username not in get_all_candidates(conn=db_conn):
                await message.reply(
                    "‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å HR.",
                    reply_markup=kb.menu_kb,
                )
            else:
                await message.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º...\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                task_status = task_complete(message.from_user.username)
                if task_status == True:
                    send_HR_metrics(message.from_user.username)
                    await message.reply(
                        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å HR –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞–±–æ—Ç—ã.",
                        reply_markup=kb.menu_kb,
                    )
                else:
                    await message.reply(
                        task_status,
                        reply_markup=kb.menu_kb,
                    )
        else:
            await message.reply(
            "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=kb.menu_kb,
        )
        await state.finish()

class FSM_RepeatTestAssignment(StatesGroup):
    confirm = State()

    async def repeat_test_assignment_command(message: types.Message):
        if message.from_user.username not in get_all_candidates(conn=db_conn):
            await message.reply(
                ("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ '<code>–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µüìÑ</code>'.\n"
                    + "–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å HR."),
                parse_mode="HTML",
                reply_markup=kb.menu_kb,
            )
        else:
            await FSM_RepeatTestAssignment.confirm.set()
            await message.reply(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ?",
                reply_markup=kb.confirm_kb,
            )
    
    async def repeat_test_assignment_confirm(message: types.Message, state: FSMContext):
        if message.text == "–û—Ç–º–µ–Ω–∞":
            await message.reply(
            "–ú–µ–Ω—é",
            reply_markup=kb.menu_kb,
        )
        elif message.text == "–î–∞":
            user_results: dict[str, str] = get_candidate_results(message.from_user.username)
            if user_results["times_attempted"] == 2:
                await message.answer(
                    "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å HR.",
                    reply_markup=kb.menu_kb,
                )
            else:
                await message.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º...\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                task_status = task_complete(message.from_user.username)
                if task_status == True:
                    if not new_task_generated(message.from_user.username):
                        await message.reply(
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å HR.",
                            reply_markup=kb.menu_kb,
                        )
                    else:
                        update_times_attempted(message.from_user.username,
                                               conn=db_conn, times_attempted=2)
                        await message.reply(
                            "–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é.",
                            reply=kb.menu_kb,
                        )
                else:
                    await message.answer(
                        ("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é</b> –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤–æ–µ.\n"
                            + f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n{task_status}\n"
                            + "–ó–∞–∫–æ–Ω—á–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."),
                        parse_mode="HTML",
                        reply_markup=kb.menu_kb,
                    )
        else:
            await message.reply(
            "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=kb.menu_kb,
        )
        await state.finish()

class FSM_HRCandidateResults(StatesGroup):
    username = State()

    @auth
    async def hr_candidate_results_command(message: types.Message):
        await FSM_HRCandidateResults.username.set()
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (Telegram) –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.",
        )

    async def hr_candidate_results_username(message: types.Message, state: FSMContext):
        if message.text not in get_all_candidates(conn=db_conn):
            await message.reply(
                "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=kb.hr_kb,
            )
        else:
            await message.reply(
            get_candidate_formatted_results(message.text),
            reply_markup=kb.hr_kb,
        )
        await state.finish()

class FSM_HRNewTask(StatesGroup):
    username = State()
    
    @auth
    async def hr_new_task_command(message: types.Message):
        await FSM_HRNewTask.username.set()
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (Telegram) –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.",
        )

    async def hr_new_task_username(message: types.Message, state: FSMContext):
        if message.text not in get_all_candidates(conn=db_conn):
            await message.reply(
                "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=kb.hr_kb,
            )
        else:
            if not new_task_generated(message.text):
                await message.reply(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.",
                    reply_markup=kb.hr_kb,
                )
            else:
                await message.reply(
                    "–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º.",
                    reply=kb.hr_kb,
                )
        await state.finish()
        

def register_FSM_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    dp.register_message_handler(
        FSM_NewCandidate.new_candidate_command, text="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µüìÑ", state=None)
    dp.register_message_handler(
        FSM_NewCandidate.new_candidate_confirm, state=FSM_NewCandidate.confirm)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    dp.register_message_handler(
        FSM_ExistingCandidate.existing_candidate_command, text="–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ‚òëÔ∏è", state=None)
    dp.register_message_handler(
        FSM_ExistingCandidate.existing_candidate_confirm, state=FSM_ExistingCandidate.confirm)

    # –ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
    dp.register_message_handler(
        FSM_RepeatTestAssignment.repeat_test_assignment_command, text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", state=None)
    dp.register_message_handler(
        FSM_RepeatTestAssignment.repeat_test_assignment_confirm, state=FSM_RepeatTestAssignment.confirm)

    # –£–∑–Ω–∞—ë–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    dp.register_message_handler(
        FSM_HRCandidateResults.hr_candidate_results_command, text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", state=None)
    dp.register_message_handler(
        FSM_HRCandidateResults.hr_candidate_results_username, state=FSM_HRCandidateResults.username)

    # –í—ã–¥–∞—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
    dp.register_message_handler(
        FSM_HRNewTask.hr_new_task_command, text="–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É", state=None)
    dp.register_message_handler(
        FSM_HRNewTask.hr_new_task_username, state=FSM_HRNewTask.username)
